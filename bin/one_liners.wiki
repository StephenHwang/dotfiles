= Assorted one liners =

== xargs ==
  - -I variable : set variable
  - -a file     : read lines from a file
  - -p interactive
  - ie:
    - touch cf.txt && seq 1 10 | xargs -I file echo "rm file" >> cf.txt
    - seq 1 10 | xargs -I file touch file
    - xargs -a cf.txt -I file sh -c file
  - pipe to vim:
    - ls | grep query | xargs vim

== bash ==
ctrl-z, fg; ding
  append command to running command

command substition:
  - evaluate command and provide result to different command
    1. using backticks:   `which vg`
    2. using dlr prn:   $(which vg)


== awk ==
Manual: https://www.gnu.org/software/gawk/manual/gawk.pdf
  - && to chain queries
  - BEGIN and END:
    - echo "1,2,3" | awk 'BEGIN {FS=OFS=","} {print $1} END {print "Done"}'

awk '$10 == "TRUE"' file
  - subset rows with column 10 as TRUE

awk -F"\t" '$3!=""' file
  - -F delimits by tab
  - excludes rows with empty column 3

- count number of columns in file:
  awk -F'\t' '{print NF}' file | sort -nu | uniq
  cat file | awk '{print NF}' | sort -nu


awk -F'\t' 'NF!=4' file
  - filter rows with 4 columns

awk '$6~/^[0-9]+/' file
  - column 6 is number
  - ~ : tilde means match the pattern to regex
  - regex enclosed in /  /

difference of two columns
{{{
awk '{ $5 = $2 - $4 } 1' input.txt > inputdiff.txt
}}}

cat reads.fastq | awk '{if(NR%4==2) print length($1)}' | sort -nr > read_length.txt
  - read length

samtools faidx sample.fa
cut -f1-2 sample.fa.fai > sample_lengths.txt
  - length of records in a fasta file


== less ==
can be used even when open (ie. ":-S"); see "h" for help
-N
  - show line number
  - can be used in conjunction with search: \query
-S
  - shorten lines

== bc ==
... | paste -sd+ | bc
  - sum

echo "sin(4)" | bc
  - pipe into bc:

== cut ==
cut -f2-7
  - cut columns 2 to 7 from file
- delimiter
  - normal
    - cut -f2 -d',' infile
  - tab
    - cut -f2 -d$'\t' infile



== assorted ==
cmp, comm, diff
  - compare files

paste file1 file2 > file.tsv
  - join column-wise with tab delim
  - also see join command to join by common field
  - -d ' ' : delimter

make install &> build.log; grep "error:" build.log
  - make and search to identify compile errors


join every N rows
{{{
cat $FILE | paste -d' ' $(printf -- '- %.0s' $(seq 0 $NUM_ORDER_MEMS))
awk '{ printf "%s ", $0 } !(NR%5) { print "" }' $FILE
}}}

check if file is sorted:
{{{
sort -c -u -n file
cmp file <(sort -n file | uniq)
}}}

head -n -1 file
  - remove last line in file

tail -n +2 file
  - remove first line

cat file | grep -v query
  - invert match (exclude those lines)

sort -V --field-separator=_ file
  - -V == --version-sort
  - version sort by _
  - ie. sort a list of reads s1_234

echo ACCTTGAAA | tr ACGTacgt TGCAtgca | rev
  - reverse complement of sequence

cat ecoli_sterilize_w_rc.txt | tr . \\n > tmp.txt
  - replace "." with new line

filter fasta file:
    - cat ecoli.lengths | grep -v "rc$" | grep -A1 "^>" | grep -v "\-\-" > tmp.lengths
  - select lines not ending in "rc"
  - select fasta records and their following lines
  - filtering the consecutive records

grep . file.txt
  - remove blank lines

== sed ==
sed -i '1 i\asdf' file
  - add line to start of file in-place

sed -i 's/old-text/new-text/g' input.txt
  - replace text

sed -i '/^all:/ s/$/ anotherthing/' file

sed -i '/^>/ s/$/ text/g' tmp.txt
  - first part: a pattern to find lines that start with >
  - secnd part: normal sed substitution with $ to append " text"

sed 's/^/ text_at_start_of_line /' file
  - add text to start (replace $ to add at end)

# to use variables, use double quotes
{{{
  APPEND=ecoli_k12
  sed -i "/^>/ s/$/ $APPEND/g" e_coli_ecoli_k12.lengths
}}}


== vim ==
sort file version reverse:
  - :%!sort -Vr

search and replace: ( https://vim.fandom.com/wiki/Search_and_replace )
  - :%s/foo/bar/g      : replace 'foo' (in the all current line) with 'bar'
  - :s/foo/bar/g       : replace 'foo' (in the current line only) with 'bar'
  - :%s/\s\+/\r/g      : replace whitespace with new line
    - :%s
    - \s\+
    - \r
    - g

search and execute
  - :g/query/action
  - ie. remove blank lines
    - :g/^$/d

macros
  - write the commands in a buffer or i<c-r>
  - edit line and yy yank command
  - `@y` to run macro

registers (:reg)
  - i<c-r>3               : paste yanked text in register 3 (:reg)
  - i<c-r>%               : insert mode % register for current filepath

writing from file (:r)
  - :r !pwd/date          : insert text from file/command
  - :r !seq 1 10         : read and enter text ( or :put =range(1,10) )

selection + norm
  - delete every other line in file (or visual selection)
    - %norm jdd
  - align to here:
    - :'<,'> norm 2ldw

reset vimwik folds
  zE
  zR
  setlocal foldmethod=expr
  zR

fzf (<C-f>)
  - f                : find file
  - a                : find in all files
  - i                : find in current file
  - h                : find history
  - g                : find git file (with differences)

splits
  - :vsp/sp               : open vertical and horizontal split
  - C-w <hjlk>            : navigate splits
  - resizing
    - C-w _                 : maximize height of current split
    - C-w |                 : maximize width of current split
    - C-w =                 : normalize split sizes
    - C-w n</>              : resize split width
    - C-w n</>              : resize split height
    - C-w r                 : swap splits
    - C-w q                 : remove split
    - :on                   : make split only split

other:
  - set background=light : Setting light mode


# join line
sed ':a;N;/>/!s/\n//;ta;P;D' file.fa
cat file.fa | grep --no-group-separator -A1 "^>header"

# join line test
{{{
awk -v RS="^>" 'NR>1{$1=$1; print RS, $0}' ecoli_head.fa
awk -v RS='>' 'NR>1{$1=$1; print RS, $0}' ecoli_head.fa
}}}


== seqtk ==
multiline fasta to joined lines
  seqtk seq -l0 file.fa

Extract sequences with names in file `name.lst`, one header per line:
    cat in.fa | grep "^>" | cut -d'>' -f2 > name.lst
    seqtk subseq in.fa name.lst


== notes ==
g++ as cpp compiler
jdownloader2
  - download using link

linux version:
  cat /etc/os-release
  lsb_release -a
  hostnamectl
  uname -r

