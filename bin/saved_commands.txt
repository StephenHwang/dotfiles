# Assorted saved commands
# setup in .bashrc
# fzf saved commands and filter comments
#   saved_commands() {
#     sed_command="sed 's/#.*$//;/^$/d'"
#     com_base="tac ~/bin/saved_commands.txt 2> /dev/null | fzf +m"
#     eval $com_base | eval $sed_command
#   }
#   bind '"\C-f": "$(saved_commands)\e\C-e\er\e^"'
vim ~/bin/saved_commands.txt

# qmk
qmk compile
qmk flash  # after pressing reset button on keyboard

# wget replacement with continue
curl -L -O url
curl -L -O -C - url

# assorted
time cat                                                           # then ctrl-c to timer
grep MemTotal /proc/meminfo                                        # check max memory
find . -exec touch {} \; && echo done                              # renew all timestamp
find . -exec chmod g+r {} \; && echo "Add group read"              # add group read
find -type d -exec chmod 750 {} \; && echo "Directory permission"  # change directory permissions
rsync -ah --progress src dest                                      # cp
du -h -d1 2> /dev/null                                             # file size
wc -L file                                                         # longest line in file
 paste -sd+ | bc                                                   # sum

/usr/bin/time -v                                                   # get peak memory usage
/usr/bin/time --format='Run stats: user=%U, system=%S, elapsed=%e, CPU=%P, MemMax=%M'    #  peak memory usage formatted
tar -zxvf                                                          # unzip tar.gz files
cmp --silent $old $new || echo "files are different"               # use comm for output
du -ah . | grep -v "/$" | sort -rh > sorted_file_sizes.txt         # sort by filesize
ipython --no-autoindent                                               # ipy
jupyter-nbconvert --to pdf file.ipynb                                 # notebook to pdf

# ding                                                                                                                                                                         #
ncat -klc "paplay /usr/share/sounds/freedesktop/stereo/complete.oga && notify-send "Succeeded"" localhost 11111 &    # succeed action
ncat -klc "paplay /usr/share/sounds/freedesktop/stereo/complete.oga && notify-send "Failed""    localhost 11110 &    # fail action
ssh -fNR 11111:localhost:11111 sjhwang@courtyard.gi.ucsc.edu                                                         # succeed tunnel
ssh -fNR 11110:localhost:11110 sjhwang@courtyard.gi.ucsc.edu                                                         # fail tunnel
&& ./succeed_ding.sh || ./fail_ding.sh                                                                               # server-side command, aliased to ding

# compile
make &> build.log; grep "error:" build.log

# git
git config --get remote.origin.url
git commit --amend -m "Modify commit message."

# make branches
git checkout -b <branch>
git push -u origin <branch>

# merge branch (merge
git checkout master
git merge branch_to_merge_into_master

# assorted bash
find . -name "filename"               # search filenames                       #
ag -g filename                        # search filename with pattern
ag text_in_file                       # search text in files
awk '{print $2}' filename             # cut column 2
cut -f2 filename                      # cut column 2
sort -V                               # version sort
uniq                                  # unique
chgrp <group> <files>                 # change group of a file
id -gn <username>                     # check default group (or use groups)
| pbcopy                              # copy into clipboard


# tmux                                                                                 #
#   :swap-window -t <window_idx>            # tmux swap window
#   :rename-window <window_name>            # tmux rename window
tmux kill-server       # killall sessions
tmux attach-session -t default2           # attach 2nd view
tmux new-session -t default -s default2   # create 2nd view
tmux new -s default
tmux attach -t default

# ssh                                                                                           #
shwang45@login.rockfish.jhu.edu

# conda commands                                                                         #
conda create --name myenv                                   # conda create env
conda deactivate; conda remove --yes --name myenv --all     # conda delete env
act                                                         # conda activate
